// Code generated by MockGen. DO NOT EDIT.
// Source: routeguideservice/pb (interfaces: RouteGuideClient,RouteGuide_ListFeaturesClient,RouteGuide_RecordRouteClient,RouteGuide_RouteChatClient,RouteGuideServer,RouteGuide_ListFeaturesServer,RouteGuide_RecordRouteServer,RouteGuide_RouteChatServer)

// Package routeguide_mock is a generated GoMock package.
package routeguide_mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	reflect "reflect"
	routeguide "routeguide/pb"
)

// MockRouteGuideClient is a mock of RouteGuideClient interface
type MockRouteGuideClient struct {
	ctrl     *gomock.Controller
	recorder *MockRouteGuideClientMockRecorder
}

// MockRouteGuideClientMockRecorder is the mock recorder for MockRouteGuideClient
type MockRouteGuideClientMockRecorder struct {
	mock *MockRouteGuideClient
}

// NewMockRouteGuideClient creates a new mock instance
func NewMockRouteGuideClient(ctrl *gomock.Controller) *MockRouteGuideClient {
	mock := &MockRouteGuideClient{ctrl: ctrl}
	mock.recorder = &MockRouteGuideClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRouteGuideClient) EXPECT() *MockRouteGuideClientMockRecorder {
	return m.recorder
}

// GetFeature mocks base method
func (m *MockRouteGuideClient) GetFeature(arg0 context.Context, arg1 *routeguide.Point, arg2 ...grpc.CallOption) (*routeguide.Feature, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetFeature", varargs...)
	ret0, _ := ret[0].(*routeguide.Feature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeature indicates an expected call of GetFeature
func (mr *MockRouteGuideClientMockRecorder) GetFeature(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeature", reflect.TypeOf((*MockRouteGuideClient)(nil).GetFeature), varargs...)
}

// ListFeatures mocks base method
func (m *MockRouteGuideClient) ListFeatures(arg0 context.Context, arg1 *routeguide.Rectangle, arg2 ...grpc.CallOption) (routeguide.RouteGuide_ListFeaturesClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListFeatures", varargs...)
	ret0, _ := ret[0].(routeguide.RouteGuide_ListFeaturesClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListFeatures indicates an expected call of ListFeatures
func (mr *MockRouteGuideClientMockRecorder) ListFeatures(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFeatures", reflect.TypeOf((*MockRouteGuideClient)(nil).ListFeatures), varargs...)
}

// RecordRoute mocks base method
func (m *MockRouteGuideClient) RecordRoute(arg0 context.Context, arg1 ...grpc.CallOption) (routeguide.RouteGuide_RecordRouteClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RecordRoute", varargs...)
	ret0, _ := ret[0].(routeguide.RouteGuide_RecordRouteClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecordRoute indicates an expected call of RecordRoute
func (mr *MockRouteGuideClientMockRecorder) RecordRoute(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordRoute", reflect.TypeOf((*MockRouteGuideClient)(nil).RecordRoute), varargs...)
}

// RouteChat mocks base method
func (m *MockRouteGuideClient) RouteChat(arg0 context.Context, arg1 ...grpc.CallOption) (routeguide.RouteGuide_RouteChatClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RouteChat", varargs...)
	ret0, _ := ret[0].(routeguide.RouteGuide_RouteChatClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RouteChat indicates an expected call of RouteChat
func (mr *MockRouteGuideClientMockRecorder) RouteChat(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RouteChat", reflect.TypeOf((*MockRouteGuideClient)(nil).RouteChat), varargs...)
}

// MockRouteGuide_ListFeaturesClient is a mock of RouteGuide_ListFeaturesClient interface
type MockRouteGuide_ListFeaturesClient struct {
	ctrl     *gomock.Controller
	recorder *MockRouteGuide_ListFeaturesClientMockRecorder
}

// MockRouteGuide_ListFeaturesClientMockRecorder is the mock recorder for MockRouteGuide_ListFeaturesClient
type MockRouteGuide_ListFeaturesClientMockRecorder struct {
	mock *MockRouteGuide_ListFeaturesClient
}

// NewMockRouteGuide_ListFeaturesClient creates a new mock instance
func NewMockRouteGuide_ListFeaturesClient(ctrl *gomock.Controller) *MockRouteGuide_ListFeaturesClient {
	mock := &MockRouteGuide_ListFeaturesClient{ctrl: ctrl}
	mock.recorder = &MockRouteGuide_ListFeaturesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRouteGuide_ListFeaturesClient) EXPECT() *MockRouteGuide_ListFeaturesClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method
func (m *MockRouteGuide_ListFeaturesClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockRouteGuide_ListFeaturesClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockRouteGuide_ListFeaturesClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockRouteGuide_ListFeaturesClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockRouteGuide_ListFeaturesClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockRouteGuide_ListFeaturesClient)(nil).Context))
}

// Header mocks base method
func (m *MockRouteGuide_ListFeaturesClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockRouteGuide_ListFeaturesClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockRouteGuide_ListFeaturesClient)(nil).Header))
}

// Recv mocks base method
func (m *MockRouteGuide_ListFeaturesClient) Recv() (*routeguide.Feature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*routeguide.Feature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockRouteGuide_ListFeaturesClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockRouteGuide_ListFeaturesClient)(nil).Recv))
}

// RecvMsg mocks base method
func (m *MockRouteGuide_ListFeaturesClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockRouteGuide_ListFeaturesClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockRouteGuide_ListFeaturesClient)(nil).RecvMsg), arg0)
}

// SendMsg mocks base method
func (m *MockRouteGuide_ListFeaturesClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockRouteGuide_ListFeaturesClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockRouteGuide_ListFeaturesClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method
func (m *MockRouteGuide_ListFeaturesClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockRouteGuide_ListFeaturesClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockRouteGuide_ListFeaturesClient)(nil).Trailer))
}

// MockRouteGuide_RecordRouteClient is a mock of RouteGuide_RecordRouteClient interface
type MockRouteGuide_RecordRouteClient struct {
	ctrl     *gomock.Controller
	recorder *MockRouteGuide_RecordRouteClientMockRecorder
}

// MockRouteGuide_RecordRouteClientMockRecorder is the mock recorder for MockRouteGuide_RecordRouteClient
type MockRouteGuide_RecordRouteClientMockRecorder struct {
	mock *MockRouteGuide_RecordRouteClient
}

// NewMockRouteGuide_RecordRouteClient creates a new mock instance
func NewMockRouteGuide_RecordRouteClient(ctrl *gomock.Controller) *MockRouteGuide_RecordRouteClient {
	mock := &MockRouteGuide_RecordRouteClient{ctrl: ctrl}
	mock.recorder = &MockRouteGuide_RecordRouteClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRouteGuide_RecordRouteClient) EXPECT() *MockRouteGuide_RecordRouteClientMockRecorder {
	return m.recorder
}

// CloseAndRecv mocks base method
func (m *MockRouteGuide_RecordRouteClient) CloseAndRecv() (*routeguide.RouteSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseAndRecv")
	ret0, _ := ret[0].(*routeguide.RouteSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloseAndRecv indicates an expected call of CloseAndRecv
func (mr *MockRouteGuide_RecordRouteClientMockRecorder) CloseAndRecv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseAndRecv", reflect.TypeOf((*MockRouteGuide_RecordRouteClient)(nil).CloseAndRecv))
}

// CloseSend mocks base method
func (m *MockRouteGuide_RecordRouteClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockRouteGuide_RecordRouteClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockRouteGuide_RecordRouteClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockRouteGuide_RecordRouteClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockRouteGuide_RecordRouteClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockRouteGuide_RecordRouteClient)(nil).Context))
}

// Header mocks base method
func (m *MockRouteGuide_RecordRouteClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockRouteGuide_RecordRouteClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockRouteGuide_RecordRouteClient)(nil).Header))
}

// RecvMsg mocks base method
func (m *MockRouteGuide_RecordRouteClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockRouteGuide_RecordRouteClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockRouteGuide_RecordRouteClient)(nil).RecvMsg), arg0)
}

// Send mocks base method
func (m *MockRouteGuide_RecordRouteClient) Send(arg0 *routeguide.Point) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockRouteGuide_RecordRouteClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockRouteGuide_RecordRouteClient)(nil).Send), arg0)
}

// SendMsg mocks base method
func (m *MockRouteGuide_RecordRouteClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockRouteGuide_RecordRouteClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockRouteGuide_RecordRouteClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method
func (m *MockRouteGuide_RecordRouteClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockRouteGuide_RecordRouteClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockRouteGuide_RecordRouteClient)(nil).Trailer))
}

// MockRouteGuide_RouteChatClient is a mock of RouteGuide_RouteChatClient interface
type MockRouteGuide_RouteChatClient struct {
	ctrl     *gomock.Controller
	recorder *MockRouteGuide_RouteChatClientMockRecorder
}

// MockRouteGuide_RouteChatClientMockRecorder is the mock recorder for MockRouteGuide_RouteChatClient
type MockRouteGuide_RouteChatClientMockRecorder struct {
	mock *MockRouteGuide_RouteChatClient
}

// NewMockRouteGuide_RouteChatClient creates a new mock instance
func NewMockRouteGuide_RouteChatClient(ctrl *gomock.Controller) *MockRouteGuide_RouteChatClient {
	mock := &MockRouteGuide_RouteChatClient{ctrl: ctrl}
	mock.recorder = &MockRouteGuide_RouteChatClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRouteGuide_RouteChatClient) EXPECT() *MockRouteGuide_RouteChatClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method
func (m *MockRouteGuide_RouteChatClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockRouteGuide_RouteChatClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockRouteGuide_RouteChatClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockRouteGuide_RouteChatClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockRouteGuide_RouteChatClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockRouteGuide_RouteChatClient)(nil).Context))
}

// Header mocks base method
func (m *MockRouteGuide_RouteChatClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockRouteGuide_RouteChatClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockRouteGuide_RouteChatClient)(nil).Header))
}

// Recv mocks base method
func (m *MockRouteGuide_RouteChatClient) Recv() (*routeguide.RouteNote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*routeguide.RouteNote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockRouteGuide_RouteChatClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockRouteGuide_RouteChatClient)(nil).Recv))
}

// RecvMsg mocks base method
func (m *MockRouteGuide_RouteChatClient) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockRouteGuide_RouteChatClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockRouteGuide_RouteChatClient)(nil).RecvMsg), arg0)
}

// Send mocks base method
func (m *MockRouteGuide_RouteChatClient) Send(arg0 *routeguide.RouteNote) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockRouteGuide_RouteChatClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockRouteGuide_RouteChatClient)(nil).Send), arg0)
}

// SendMsg mocks base method
func (m *MockRouteGuide_RouteChatClient) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockRouteGuide_RouteChatClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockRouteGuide_RouteChatClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method
func (m *MockRouteGuide_RouteChatClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockRouteGuide_RouteChatClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockRouteGuide_RouteChatClient)(nil).Trailer))
}

// MockRouteGuideServer is a mock of RouteGuideServer interface
type MockRouteGuideServer struct {
	ctrl     *gomock.Controller
	recorder *MockRouteGuideServerMockRecorder
}

// MockRouteGuideServerMockRecorder is the mock recorder for MockRouteGuideServer
type MockRouteGuideServerMockRecorder struct {
	mock *MockRouteGuideServer
}

// NewMockRouteGuideServer creates a new mock instance
func NewMockRouteGuideServer(ctrl *gomock.Controller) *MockRouteGuideServer {
	mock := &MockRouteGuideServer{ctrl: ctrl}
	mock.recorder = &MockRouteGuideServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRouteGuideServer) EXPECT() *MockRouteGuideServerMockRecorder {
	return m.recorder
}

// GetFeature mocks base method
func (m *MockRouteGuideServer) GetFeature(arg0 context.Context, arg1 *routeguide.Point) (*routeguide.Feature, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeature", arg0, arg1)
	ret0, _ := ret[0].(*routeguide.Feature)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeature indicates an expected call of GetFeature
func (mr *MockRouteGuideServerMockRecorder) GetFeature(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeature", reflect.TypeOf((*MockRouteGuideServer)(nil).GetFeature), arg0, arg1)
}

// ListFeatures mocks base method
func (m *MockRouteGuideServer) ListFeatures(arg0 *routeguide.Rectangle, arg1 routeguide.RouteGuide_ListFeaturesServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFeatures", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListFeatures indicates an expected call of ListFeatures
func (mr *MockRouteGuideServerMockRecorder) ListFeatures(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFeatures", reflect.TypeOf((*MockRouteGuideServer)(nil).ListFeatures), arg0, arg1)
}

// RecordRoute mocks base method
func (m *MockRouteGuideServer) RecordRoute(arg0 routeguide.RouteGuide_RecordRouteServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordRoute", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordRoute indicates an expected call of RecordRoute
func (mr *MockRouteGuideServerMockRecorder) RecordRoute(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordRoute", reflect.TypeOf((*MockRouteGuideServer)(nil).RecordRoute), arg0)
}

// RouteChat mocks base method
func (m *MockRouteGuideServer) RouteChat(arg0 routeguide.RouteGuide_RouteChatServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RouteChat", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RouteChat indicates an expected call of RouteChat
func (mr *MockRouteGuideServerMockRecorder) RouteChat(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RouteChat", reflect.TypeOf((*MockRouteGuideServer)(nil).RouteChat), arg0)
}

// mustEmbedUnimplementedRouteGuideServer mocks base method
func (m *MockRouteGuideServer) mustEmbedUnimplementedRouteGuideServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedRouteGuideServer")
}

// mustEmbedUnimplementedRouteGuideServer indicates an expected call of mustEmbedUnimplementedRouteGuideServer
func (mr *MockRouteGuideServerMockRecorder) mustEmbedUnimplementedRouteGuideServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedRouteGuideServer", reflect.TypeOf((*MockRouteGuideServer)(nil).mustEmbedUnimplementedRouteGuideServer))
}

// MockRouteGuide_ListFeaturesServer is a mock of RouteGuide_ListFeaturesServer interface
type MockRouteGuide_ListFeaturesServer struct {
	ctrl     *gomock.Controller
	recorder *MockRouteGuide_ListFeaturesServerMockRecorder
}

// MockRouteGuide_ListFeaturesServerMockRecorder is the mock recorder for MockRouteGuide_ListFeaturesServer
type MockRouteGuide_ListFeaturesServerMockRecorder struct {
	mock *MockRouteGuide_ListFeaturesServer
}

// NewMockRouteGuide_ListFeaturesServer creates a new mock instance
func NewMockRouteGuide_ListFeaturesServer(ctrl *gomock.Controller) *MockRouteGuide_ListFeaturesServer {
	mock := &MockRouteGuide_ListFeaturesServer{ctrl: ctrl}
	mock.recorder = &MockRouteGuide_ListFeaturesServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRouteGuide_ListFeaturesServer) EXPECT() *MockRouteGuide_ListFeaturesServerMockRecorder {
	return m.recorder
}

// Context mocks base method
func (m *MockRouteGuide_ListFeaturesServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockRouteGuide_ListFeaturesServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockRouteGuide_ListFeaturesServer)(nil).Context))
}

// RecvMsg mocks base method
func (m *MockRouteGuide_ListFeaturesServer) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockRouteGuide_ListFeaturesServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockRouteGuide_ListFeaturesServer)(nil).RecvMsg), arg0)
}

// Send mocks base method
func (m *MockRouteGuide_ListFeaturesServer) Send(arg0 *routeguide.Feature) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockRouteGuide_ListFeaturesServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockRouteGuide_ListFeaturesServer)(nil).Send), arg0)
}

// SendHeader mocks base method
func (m *MockRouteGuide_ListFeaturesServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader
func (mr *MockRouteGuide_ListFeaturesServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockRouteGuide_ListFeaturesServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method
func (m *MockRouteGuide_ListFeaturesServer) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockRouteGuide_ListFeaturesServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockRouteGuide_ListFeaturesServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method
func (m *MockRouteGuide_ListFeaturesServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader
func (mr *MockRouteGuide_ListFeaturesServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockRouteGuide_ListFeaturesServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method
func (m *MockRouteGuide_ListFeaturesServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer
func (mr *MockRouteGuide_ListFeaturesServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockRouteGuide_ListFeaturesServer)(nil).SetTrailer), arg0)
}

// MockRouteGuide_RecordRouteServer is a mock of RouteGuide_RecordRouteServer interface
type MockRouteGuide_RecordRouteServer struct {
	ctrl     *gomock.Controller
	recorder *MockRouteGuide_RecordRouteServerMockRecorder
}

// MockRouteGuide_RecordRouteServerMockRecorder is the mock recorder for MockRouteGuide_RecordRouteServer
type MockRouteGuide_RecordRouteServerMockRecorder struct {
	mock *MockRouteGuide_RecordRouteServer
}

// NewMockRouteGuide_RecordRouteServer creates a new mock instance
func NewMockRouteGuide_RecordRouteServer(ctrl *gomock.Controller) *MockRouteGuide_RecordRouteServer {
	mock := &MockRouteGuide_RecordRouteServer{ctrl: ctrl}
	mock.recorder = &MockRouteGuide_RecordRouteServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRouteGuide_RecordRouteServer) EXPECT() *MockRouteGuide_RecordRouteServerMockRecorder {
	return m.recorder
}

// Context mocks base method
func (m *MockRouteGuide_RecordRouteServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockRouteGuide_RecordRouteServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockRouteGuide_RecordRouteServer)(nil).Context))
}

// Recv mocks base method
func (m *MockRouteGuide_RecordRouteServer) Recv() (*routeguide.Point, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*routeguide.Point)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockRouteGuide_RecordRouteServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockRouteGuide_RecordRouteServer)(nil).Recv))
}

// RecvMsg mocks base method
func (m *MockRouteGuide_RecordRouteServer) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockRouteGuide_RecordRouteServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockRouteGuide_RecordRouteServer)(nil).RecvMsg), arg0)
}

// SendAndClose mocks base method
func (m *MockRouteGuide_RecordRouteServer) SendAndClose(arg0 *routeguide.RouteSummary) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAndClose", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendAndClose indicates an expected call of SendAndClose
func (mr *MockRouteGuide_RecordRouteServerMockRecorder) SendAndClose(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAndClose", reflect.TypeOf((*MockRouteGuide_RecordRouteServer)(nil).SendAndClose), arg0)
}

// SendHeader mocks base method
func (m *MockRouteGuide_RecordRouteServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader
func (mr *MockRouteGuide_RecordRouteServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockRouteGuide_RecordRouteServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method
func (m *MockRouteGuide_RecordRouteServer) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockRouteGuide_RecordRouteServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockRouteGuide_RecordRouteServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method
func (m *MockRouteGuide_RecordRouteServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader
func (mr *MockRouteGuide_RecordRouteServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockRouteGuide_RecordRouteServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method
func (m *MockRouteGuide_RecordRouteServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer
func (mr *MockRouteGuide_RecordRouteServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockRouteGuide_RecordRouteServer)(nil).SetTrailer), arg0)
}

// MockRouteGuide_RouteChatServer is a mock of RouteGuide_RouteChatServer interface
type MockRouteGuide_RouteChatServer struct {
	ctrl     *gomock.Controller
	recorder *MockRouteGuide_RouteChatServerMockRecorder
}

// MockRouteGuide_RouteChatServerMockRecorder is the mock recorder for MockRouteGuide_RouteChatServer
type MockRouteGuide_RouteChatServerMockRecorder struct {
	mock *MockRouteGuide_RouteChatServer
}

// NewMockRouteGuide_RouteChatServer creates a new mock instance
func NewMockRouteGuide_RouteChatServer(ctrl *gomock.Controller) *MockRouteGuide_RouteChatServer {
	mock := &MockRouteGuide_RouteChatServer{ctrl: ctrl}
	mock.recorder = &MockRouteGuide_RouteChatServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRouteGuide_RouteChatServer) EXPECT() *MockRouteGuide_RouteChatServerMockRecorder {
	return m.recorder
}

// Context mocks base method
func (m *MockRouteGuide_RouteChatServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockRouteGuide_RouteChatServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockRouteGuide_RouteChatServer)(nil).Context))
}

// Recv mocks base method
func (m *MockRouteGuide_RouteChatServer) Recv() (*routeguide.RouteNote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*routeguide.RouteNote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockRouteGuide_RouteChatServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockRouteGuide_RouteChatServer)(nil).Recv))
}

// RecvMsg mocks base method
func (m *MockRouteGuide_RouteChatServer) RecvMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockRouteGuide_RouteChatServerMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockRouteGuide_RouteChatServer)(nil).RecvMsg), arg0)
}

// Send mocks base method
func (m *MockRouteGuide_RouteChatServer) Send(arg0 *routeguide.RouteNote) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockRouteGuide_RouteChatServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockRouteGuide_RouteChatServer)(nil).Send), arg0)
}

// SendHeader mocks base method
func (m *MockRouteGuide_RouteChatServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader
func (mr *MockRouteGuide_RouteChatServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockRouteGuide_RouteChatServer)(nil).SendHeader), arg0)
}

// SendMsg mocks base method
func (m *MockRouteGuide_RouteChatServer) SendMsg(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockRouteGuide_RouteChatServerMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockRouteGuide_RouteChatServer)(nil).SendMsg), arg0)
}

// SetHeader mocks base method
func (m *MockRouteGuide_RouteChatServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader
func (mr *MockRouteGuide_RouteChatServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockRouteGuide_RouteChatServer)(nil).SetHeader), arg0)
}

// SetTrailer mocks base method
func (m *MockRouteGuide_RouteChatServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer
func (mr *MockRouteGuide_RouteChatServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockRouteGuide_RouteChatServer)(nil).SetTrailer), arg0)
}
