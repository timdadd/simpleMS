#!/bin/bash

# V0.0.2 : TCD : First version
# V0.0.3 : TCD : If mod file exists check pb is included

## This script generates the local gRPC go file and also generally initialises the project directory
## Start by defining a pb file in the root pb directory and then create a script to call this
## within the project directory

## Then you're ready to write main.go etc.

pb_file=$1
pb_dir="../../pb"
#lpb_dir="${pb_file}_pb"
lpb_dir="pb"

source ./lib/scripts/env.sh

echo "Generating protobuf files for ${YELLOW}$pb_file${WHITE}"

if [ ! -d ../../services ]; then
  echo "${RED}This needs to be run from a microservice directory$WHITE"
  exit 1
fi

pb_df=$pb_dir/$pb_file.proto
if [ ! -f $pb_df ]; then
  echo "${RED}No protobuf definition file found at $pb_df$WHITE"
  exit 1
fi

  ## Are the go protoc-gen files installed?
source ./lib/scripts/go/sh
install_protogen protobuf protoc-gen-go
install_protogen grpc protoc-gen-go-grpc

## OK now for the stuff specific to this microservice
servicename=${PWD##*/}

if [ ! -d ./$lpb_dir ]; then
  echo "${GREEN}Creating $lpb_dir directory$WHITE"
  mkdir $lpb_dir
fi

## do we have a go.mod file - could be a new project
if [ ! -f go.mod ]; then
  echo "${YELLOW}Creating a go.mod file for service $GREEN$servicename$WHITE"
  go mod init
  go mod edit -module $servicename
  go mod edit -require lib@v0.0.0
  go mod edit -replace lib@v0.0.0=./lib
  go get -u google.golang.org/protobuf/proto
  echo $CYAN
  cat go.mod
  echo $WHITE
fi
#go mod edit -require pb@v0.0.0
#go mod edit -replace pb@v0.0.0=./$lpb_dir

## pb generation - needed for structures
protoc -I=$pb_dir $pb_df --go_out=$lpb_dir

## grpc generation - needed for rpc comms
protoc -I=$pb_dir $pb_df --go-grpc_out=$lpb_dir

## Show what's been done
i=1
pb_gen_files=($lpb_dir/*.pb.go)
for f in "${pb_gen_files[@]}"
do
  colour=$(tput setaf $i)
  echo $colour
  echo $f
  l="$(grep -n "Code generated by" $f | head -n 1 | cut -d: -f1)"
  lines="-5"
  if [ "$l" = "1" ]; then lines="-3" ; fi
  l=$((l-lines-1))
  head -n $l $f | tail $lines
  i=$((i+1))
done
echo $WHITE

## Create the mockgen file if mockgen loaded
## Cannot use -source=because grpc package imports two different packages called backoff, see https://github.com/golang/mock/issues/156
if [ "$(whatdir mockgen)" ]; then
  mock_dir="mox"
  mock_pkg="${pb_file}_mock"
  mock_file="grpc_pb_mock.go"
  echo "${BLUE}Creating the associated mock file in ${mock_dir}${WHITE}"
  if [ ! -d ./$mock_dir ]; then
    echo "${GREEN}Creating $mock_dir directory$WHITE"
    mkdir $mock_dir
  fi
  cd $lpb_dir
  interfaces=($(grep -Po 'type \K.*(?=interface)' *_grpc.pb.go))
  IFS=,
#  echo "${interfaces[0]}" "${interfaces[1]}" "${interfaces[*]}"
  cmd="mockgen -destination=../$mock_dir/$mock_file -package=$mock_pkg . ${interfaces[*]}"
  IFS=
  echo "$cmd"
  bash -c "$cmd"
  cd ..
  if [ -f ./$mock_dir/$mock_file ]; then
    echo "${GREEN}Mock file ${YELLOW}$mock_file${GREEN} created in $mock_dir with package name $mock_pkg$WHITE"
  fi
fi
